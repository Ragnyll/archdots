#!/bin/bash

# any failure in piped commands aborts pipe
set -o pipefail
# exit when any command fails
set -e
# Checking dependencies:
whereis ffmpeg > /dev/null || echoexit "'ffmpeg' not found."

VIDEO_SILENT="Video"
SCREENCAST="Screencast"

function echoexit() {
    # Print to stderr and exit
    printf "$@" 1>&2
    exit 1
}

function usage() {
    printf "Dynamic menu interface for ffmpeg.

Usage:
  ffmpeg-dmenu [-h]
    -h                                 Display this help message."
}

function init_menu() {
    # Initial menu.

    local options="0\nKill"
    printf "$options" | dmenu -i -p "ffmpeg monitor"
}

function select_monitor() {
    # right now 0 is the only one allowed. make this smarter
    local options="0\nNone"
    printf $options | dmenu -i -p "Capture Screen"
}

function killrecording() {
	pid="$(cat /tmp/recordingpid)"
	# kill with SIGTERM, allowing finishing touches.
	kill -15 "$pid"
	rm -f /tmp/recordingpid
	# even after SIGTERM, ffmpeg may still run, so SIGKILL it.
	sleep 3
	kill -9 "$pid"
	exit
}

function ffmpeg_video_silent() {
    # captures a single screen of video with no audio
    ffmpeg \
    -f x11grab \
    -s "$(xdpyinfo | grep dimensions | awk '{print $2;}')" \
    -i "$DISPLAY" \
    -c:v libx264 -qp 0 -r 30 \
    "$HOME/Videos/capture/$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! > /tmp/recordingpid
}

function ffmpeg_video() {
    ffmpeg -y \
	-f x11grab \
	-framerate 60 \
	-s "$(xdpyinfo | grep dimensions | awk '{print $2;}')" \
	-i "$DISPLAY" \
	-f alsa -i default \
	-r 30 \
 	-c:v h264 -crf 0 -preset ultrafast -c:a aac \
    "$HOME/Videos/capture/$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! > /tmp/recordingpid
}

function get_recording_type() {
    # gets the type of recording
    local options="$VIDEO_SILENT\n$SCREENCAST"

    printf $options | dmenu -i -p "ffmpeg rec type"
}

function start_ffmpeg() {
    # start ffmpeg recording on the specified monitor (monitor selection doesnt work yet)

    case $(get_recording_type) in
        # record screen with no sound
        "$VIDEO_SILENT")
            ffmpeg_video_silent
            ;;
        "$SCREENCAST")
            ffmpeg_video
            ;;
        "$WITH_WEBCAM")
            ;;
        *)
            ;;
    esac
}

case $(init_menu) in
    # Select which screen to capture
    0)
        [ -d $HOME/Videos/capture ] || mkdir -p $HOME/Videos/capture
        start_ffmpeg 0
        ;;
    "Kill")
        killrecording
        ;;
    *)
        ;;
esac
